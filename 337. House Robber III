# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def rob(self, root: TreeNode) -> int:
        res = self.helper(root)
        return max(res)
        
    def helper(self, node):
        if not node:
            return [0, 0]
        
        # cur_res[0] -> the maximum sum value from -2 level to leaves
        # cur_res[1] -> the maximum sum value form -1 level to leaves
        cur_res = [0, 0]
        left = self.helper(node.left)
        right = self.helper(node.right)
        
        # do not rob the current level, sum up all left and right subtrees
        cur_res[0] = max(left[0], left[1]) + max(right[0], right[1])
        # rob current level, bypass the previous level
        cur_res[1] = node.val + left[0] + right[0]
        return cur_res
    
'''
The thief has found himself a new place for his thievery again. There is only one entrance to this area, called the "root." Besides the root, each house has one and only one parent house. After a tour, the smart thief realized that "all houses in this place forms a binary tree". It will automatically contact the police if two directly-linked houses were broken into on the same night.
Determine the maximum amount of money the thief can rob tonight without alerting the police.

Solution: DFS, Greedy
Time: O(n)
Space: O(1)
'''
